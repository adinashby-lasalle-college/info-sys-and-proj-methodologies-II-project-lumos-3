//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Night/Scripts/NightEventInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PlayerAction_NightEvent
{
    public partial class @NightEventInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @NightEventInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""NightEventInput"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""36aa0adf-7fe9-4a17-bb29-c8a52d09a199"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2dd34a3e-cae4-409f-89eb-ad5a3383cfe8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeDir_Up"",
                    ""type"": ""Button"",
                    ""id"": ""b4f99c25-89d4-462a-8d38-c2d663ecf79b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeDir_Down"",
                    ""type"": ""Button"",
                    ""id"": ""c3b23e38-7da3-4147-8cab-ae5e97f05b40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeDir_Left"",
                    ""type"": ""Button"",
                    ""id"": ""93029856-ad7d-4bd2-941a-d210e84290ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeDir_Right"",
                    ""type"": ""Button"",
                    ""id"": ""587d4c6f-65bd-47d8-ba04-d14d74d73602"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""46b605e5-4962-4135-aa2a-8660ca849614"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""e75b558e-aa08-4741-bf0a-761691f973d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""48173a96-2e1a-42ff-a317-6246ce730b55"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a48d454d-30b9-462f-9db7-3a5ea0725002"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1f4445d9-835f-4f65-850c-2547ed0a906f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""738456be-a0f6-4f0b-b38c-d4431b3fe109"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5855df15-a051-42a1-83ea-530ec494cb11"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""95de7a21-4d1c-4027-a76e-ddcf33f36691"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeDir_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c44222dd-1083-42a2-90a1-68023c186b7c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeDir_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22a2e654-5b44-43c7-a5b8-072c9de1f8b0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeDir_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10a45aa0-e16a-4022-9bd6-8293dda92c0e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeDir_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26cd09b2-f261-4b6a-a796-59d650e03901"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f04152b7-e8a0-4627-a878-234d9f45bd67"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // InGame
            m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
            m_InGame_Movement = m_InGame.FindAction("Movement", throwIfNotFound: true);
            m_InGame_ChangeDir_Up = m_InGame.FindAction("ChangeDir_Up", throwIfNotFound: true);
            m_InGame_ChangeDir_Down = m_InGame.FindAction("ChangeDir_Down", throwIfNotFound: true);
            m_InGame_ChangeDir_Left = m_InGame.FindAction("ChangeDir_Left", throwIfNotFound: true);
            m_InGame_ChangeDir_Right = m_InGame.FindAction("ChangeDir_Right", throwIfNotFound: true);
            m_InGame_PickUp = m_InGame.FindAction("PickUp", throwIfNotFound: true);
            m_InGame_Throw = m_InGame.FindAction("Throw", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // InGame
        private readonly InputActionMap m_InGame;
        private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
        private readonly InputAction m_InGame_Movement;
        private readonly InputAction m_InGame_ChangeDir_Up;
        private readonly InputAction m_InGame_ChangeDir_Down;
        private readonly InputAction m_InGame_ChangeDir_Left;
        private readonly InputAction m_InGame_ChangeDir_Right;
        private readonly InputAction m_InGame_PickUp;
        private readonly InputAction m_InGame_Throw;
        public struct InGameActions
        {
            private @NightEventInput m_Wrapper;
            public InGameActions(@NightEventInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_InGame_Movement;
            public InputAction @ChangeDir_Up => m_Wrapper.m_InGame_ChangeDir_Up;
            public InputAction @ChangeDir_Down => m_Wrapper.m_InGame_ChangeDir_Down;
            public InputAction @ChangeDir_Left => m_Wrapper.m_InGame_ChangeDir_Left;
            public InputAction @ChangeDir_Right => m_Wrapper.m_InGame_ChangeDir_Right;
            public InputAction @PickUp => m_Wrapper.m_InGame_PickUp;
            public InputAction @Throw => m_Wrapper.m_InGame_Throw;
            public InputActionMap Get() { return m_Wrapper.m_InGame; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
            public void AddCallbacks(IInGameActions instance)
            {
                if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ChangeDir_Up.started += instance.OnChangeDir_Up;
                @ChangeDir_Up.performed += instance.OnChangeDir_Up;
                @ChangeDir_Up.canceled += instance.OnChangeDir_Up;
                @ChangeDir_Down.started += instance.OnChangeDir_Down;
                @ChangeDir_Down.performed += instance.OnChangeDir_Down;
                @ChangeDir_Down.canceled += instance.OnChangeDir_Down;
                @ChangeDir_Left.started += instance.OnChangeDir_Left;
                @ChangeDir_Left.performed += instance.OnChangeDir_Left;
                @ChangeDir_Left.canceled += instance.OnChangeDir_Left;
                @ChangeDir_Right.started += instance.OnChangeDir_Right;
                @ChangeDir_Right.performed += instance.OnChangeDir_Right;
                @ChangeDir_Right.canceled += instance.OnChangeDir_Right;
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }

            private void UnregisterCallbacks(IInGameActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @ChangeDir_Up.started -= instance.OnChangeDir_Up;
                @ChangeDir_Up.performed -= instance.OnChangeDir_Up;
                @ChangeDir_Up.canceled -= instance.OnChangeDir_Up;
                @ChangeDir_Down.started -= instance.OnChangeDir_Down;
                @ChangeDir_Down.performed -= instance.OnChangeDir_Down;
                @ChangeDir_Down.canceled -= instance.OnChangeDir_Down;
                @ChangeDir_Left.started -= instance.OnChangeDir_Left;
                @ChangeDir_Left.performed -= instance.OnChangeDir_Left;
                @ChangeDir_Left.canceled -= instance.OnChangeDir_Left;
                @ChangeDir_Right.started -= instance.OnChangeDir_Right;
                @ChangeDir_Right.performed -= instance.OnChangeDir_Right;
                @ChangeDir_Right.canceled -= instance.OnChangeDir_Right;
                @PickUp.started -= instance.OnPickUp;
                @PickUp.performed -= instance.OnPickUp;
                @PickUp.canceled -= instance.OnPickUp;
                @Throw.started -= instance.OnThrow;
                @Throw.performed -= instance.OnThrow;
                @Throw.canceled -= instance.OnThrow;
            }

            public void RemoveCallbacks(IInGameActions instance)
            {
                if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInGameActions instance)
            {
                foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InGameActions @InGame => new InGameActions(this);
        public interface IInGameActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnChangeDir_Up(InputAction.CallbackContext context);
            void OnChangeDir_Down(InputAction.CallbackContext context);
            void OnChangeDir_Left(InputAction.CallbackContext context);
            void OnChangeDir_Right(InputAction.CallbackContext context);
            void OnPickUp(InputAction.CallbackContext context);
            void OnThrow(InputAction.CallbackContext context);
        }
    }
}
